-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/convolutionPlayback/convolutionPlayback.vhd
-- Created: 2024-05-04 23:42:17
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.01725e-08
-- Target subsystem base rate: 1.01725e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- audioOut                      ce_out        2.08333e-05
-- recording                     ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: convolutionPlayback
-- Source Path: convolutionPlayback/convolutionPlayback
-- Hierarchy Level: 0
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.convolutionPlayback_pkg.ALL;

ENTITY convolutionPlayback IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        audioIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        modeControl                       :   IN    std_logic;  -- ufix1
        wetDryMix                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        volume                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        enable                            :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        audioOut                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        recording                         :   OUT   std_logic
        );
END convolutionPlayback;


ARCHITECTURE rtl OF convolutionPlayback IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT convolutionPlayback_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2048_0                    :   OUT   std_logic;
          enb_1_2048_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT recordingConvolver
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          input                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          record_rsvd                     :   IN    std_logic;
          convolved                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          recording                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT wetDryMixer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dry                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          wet                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          wetDryMix                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
          volume                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
          mixed                           :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : convolutionPlayback_tc
    USE ENTITY work.convolutionPlayback_tc(rtl);

  FOR ALL : recordingConvolver
    USE ENTITY work.recordingConvolver(rtl);

  FOR ALL : wetDryMixer
    USE ENTITY work.wetDryMixer(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2048_1                     : std_logic;
  SIGNAL enb_1_2048_0                     : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enable_1                         : std_logic;  -- ufix1
  SIGNAL rd_1_reg                         : std_logic_vector(2048 DOWNTO 0);  -- ufix1 [2049]
  SIGNAL enable_2                         : std_logic;  -- ufix1
  SIGNAL Cast_To_Boolean1_out1            : std_logic;
  SIGNAL rd_2_reg                         : std_logic_vector(8 DOWNTO 0);  -- ufix1 [9]
  SIGNAL Cast_To_Boolean1_out1_1          : std_logic;
  SIGNAL dryAudio                         : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL delayMatch_reg                   : vector_of_signed24(0 TO 2047);  -- sfix24 [2048]
  SIGNAL dryAudio_1                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL rd_3_reg                         : vector_of_signed24(0 TO 9);  -- sfix24 [10]
  SIGNAL dryAudio_2                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL recordingConvolver_out1          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL recordingConvolver_out2          : std_logic;
  SIGNAL wetDryMix_1                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL volume_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL recordingConvolver_out1_1        : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch1_reg                  : vector_of_unsigned16(0 TO 2039);  -- ufix16 [2040]
  SIGNAL wetDryMix_2                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL delayMatch2_reg                  : vector_of_unsigned16(0 TO 2039);  -- ufix16 [2040]
  SIGNAL volume_2                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wetDryMixer_out1                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL wetDryMixer_out1_signed          : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL wetDryMixer_out1_1               : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch_out1                      : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL t_bypass_reg                     : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Switch_out1_1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL delayMatch4_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL recordingConvolver_out2_1        : std_logic;

BEGIN
  u_convolutionPlayback_tc : convolutionPlayback_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1
              );

  u_recordingConvolver : recordingConvolver
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_1_1 => enb_1_1_1,
              input => audioIn,  -- sfix24_En23
              record_rsvd => Cast_To_Boolean_out1,
              convolved => recordingConvolver_out1,  -- sfix24_En23
              recording => recordingConvolver_out2
              );

  u_wetDryMixer : wetDryMixer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dry => std_logic_vector(dryAudio_1),  -- sfix24_En23
              wet => recordingConvolver_out1_1,  -- sfix24_En23
              wetDryMix => std_logic_vector(wetDryMix_2),  -- ufix16_En16
              volume => std_logic_vector(volume_2),  -- ufix16_En16
              mixed => wetDryMixer_out1  -- sfix24_En23
              );

  enable_1 <= enable;

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_1_reg(0) <= enable_1;
        rd_1_reg(2048 DOWNTO 1) <= rd_1_reg(2047 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  enable_2 <= rd_1_reg(2048);

  Cast_To_Boolean1_out1 <= enable_2;

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_2_reg(0) <= Cast_To_Boolean1_out1;
        rd_2_reg(8 DOWNTO 1) <= rd_2_reg(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  Cast_To_Boolean1_out1_1 <= rd_2_reg(8);

  dryAudio <= signed(audioIn);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= dryAudio;
        delayMatch_reg(1 TO 2047) <= delayMatch_reg(0 TO 2046);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  dryAudio_1 <= delayMatch_reg(2047);

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_3_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_3_reg(0) <= dryAudio_1;
        rd_3_reg(1 TO 9) <= rd_3_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS rd_3_process;

  dryAudio_2 <= rd_3_reg(9);

  Cast_To_Boolean_out1 <= modeControl;

  wetDryMix_1 <= unsigned(wetDryMix);

  volume_1 <= unsigned(volume);

  recordingConvolver_out1_1 <= std_logic_vector(signed(recordingConvolver_out1));

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= wetDryMix_1;
        delayMatch1_reg(1 TO 2039) <= delayMatch1_reg(0 TO 2038);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  wetDryMix_2 <= delayMatch1_reg(2039);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= volume_1;
        delayMatch2_reg(1 TO 2039) <= delayMatch2_reg(0 TO 2038);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  volume_2 <= delayMatch2_reg(2039);

  wetDryMixer_out1_signed <= signed(wetDryMixer_out1);

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wetDryMixer_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wetDryMixer_out1_1 <= wetDryMixer_out1_signed;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  Switch_out1 <= dryAudio_2 WHEN Cast_To_Boolean1_out1_1 = '0' ELSE
      wetDryMixer_out1_1;

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        t_bypass_reg <= Switch_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Switch_out1_1 <= Switch_out1 WHEN enb_1_2048_1 = '1' ELSE
      t_bypass_reg;

  audioOut <= std_logic_vector(Switch_out1_1);

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        delayMatch4_reg(0) <= recordingConvolver_out2;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  recordingConvolver_out2_1 <= delayMatch4_reg(1);

  ce_out <= enb_1_2048_1;

  recording <= recordingConvolver_out2_1;

END rtl;

