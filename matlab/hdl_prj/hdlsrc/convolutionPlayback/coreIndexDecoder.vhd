-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/convolutionPlayback/coreIndexDecoder.vhd
-- Created: 2024-05-04 23:42:17
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: coreIndexDecoder
-- Source Path: convolutionPlayback/convolutionPlayback/recordingConvolver/coreIndexDecoder
-- Hierarchy Level: 2
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.convolutionPlayback_pkg.ALL;

ENTITY coreIndexDecoder IS
  PORT( number                            :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        decoded                           :   OUT   std_logic_vector(23 DOWNTO 0)  -- boolean [24]
        );
END coreIndexDecoder;


ARCHITECTURE rtl OF coreIndexDecoder IS

  ATTRIBUTE multstyle : string;

  -- Constants
  CONSTANT nc                             : vector_of_signed16(0 TO 23) := 
    (to_signed(16#0400#, 16), to_signed(16#0800#, 16), to_signed(16#0C00#, 16), to_signed(16#1000#, 16),
     to_signed(16#1400#, 16), to_signed(16#1800#, 16), to_signed(16#1C00#, 16), to_signed(16#2000#, 16),
     to_signed(16#2400#, 16), to_signed(16#2800#, 16), to_signed(16#2C00#, 16), to_signed(16#3000#, 16),
     to_signed(16#3400#, 16), to_signed(16#3800#, 16), to_signed(16#3C00#, 16), to_signed(16#4000#, 16),
     to_signed(16#4400#, 16), to_signed(16#4800#, 16), to_signed(16#4C00#, 16), to_signed(16#5000#, 16),
     to_signed(16#5400#, 16), to_signed(16#5800#, 16), to_signed(16#5C00#, 16), to_signed(16#6000#, 16));  -- sfix16 [24]

  -- Signals
  SIGNAL number_unsigned                  : unsigned(5 DOWNTO 0);  -- ufix6

BEGIN
  number_unsigned <= unsigned(number);

  coreIndexDecoder_1_output : PROCESS (number_unsigned)
    VARIABLE i : signed(15 DOWNTO 0);
    VARIABLE sub_cast : vector_of_signed17(0 TO 23);
    VARIABLE sub_temp : vector_of_signed17(0 TO 23);
    VARIABLE cast : vector_of_signed17(0 TO 23);
    VARIABLE sub_cast_0 : vector_of_signed32(0 TO 23);
  BEGIN
    i := to_signed(16#0000#, 16);
    -- Deassert all outputs by default

    FOR t_0 IN 0 TO 23 LOOP
      decoded(t_0) <= '0';
    END LOOP;

    -- Assert the output which corresponds to the input value

    FOR i_0 IN 0 TO 23 LOOP
      i := nc(i_0);
      sub_cast(i_0) := resize(i, 17);
      sub_temp(i_0) := sub_cast(i_0) - to_signed(16#00400#, 17);
      cast(i_0) := signed(resize(number_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17));
      IF sub_temp(i_0) = cast(i_0) THEN 
        sub_cast_0(i_0) := resize(i(15 DOWNTO 10), 32);
        decoded(to_integer(sub_cast_0(i_0) - 1)) <= '1';
      END IF;
    END LOOP;

  END PROCESS coreIndexDecoder_1_output;


END rtl;

