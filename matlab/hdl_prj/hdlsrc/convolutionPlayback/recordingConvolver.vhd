-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/convolutionPlayback/recordingConvolver.vhd
-- Created: 2024-05-04 23:42:17
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: recordingConvolver
-- Source Path: convolutionPlayback/convolutionPlayback/recordingConvolver
-- Hierarchy Level: 1
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.convolutionPlayback_pkg.ALL;

ENTITY recordingConvolver IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        input                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        record_rsvd                       :   IN    std_logic;
        convolved                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        recording                         :   OUT   std_logic
        );
END recordingConvolver;


ARCHITECTURE rtl OF recordingConvolver IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT div_by_constant
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          X                               :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          validIn                         :   IN    std_logic;
          Y                               :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT coreIndexDecoder
    PORT( number                          :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          decoded                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- boolean [24]
          );
  END COMPONENT;

  COMPONENT convolutionCore1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore21
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore22
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore23
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          old_sample                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT convolutionCore24
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          preload                         :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          new_sample                      :   IN    std_logic;
          impulse                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          new_impulse                     :   IN    std_logic;
          result                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En23
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Detect_Rise_Positive
    USE ENTITY work.Detect_Rise_Positive(rtl);

  FOR ALL : div_by_constant
    USE ENTITY work.div_by_constant(rtl);

  FOR ALL : coreIndexDecoder
    USE ENTITY work.coreIndexDecoder(rtl);

  FOR ALL : convolutionCore1
    USE ENTITY work.convolutionCore1(rtl);

  FOR ALL : convolutionCore2
    USE ENTITY work.convolutionCore2(rtl);

  FOR ALL : convolutionCore3
    USE ENTITY work.convolutionCore3(rtl);

  FOR ALL : convolutionCore4
    USE ENTITY work.convolutionCore4(rtl);

  FOR ALL : convolutionCore5
    USE ENTITY work.convolutionCore5(rtl);

  FOR ALL : convolutionCore6
    USE ENTITY work.convolutionCore6(rtl);

  FOR ALL : convolutionCore7
    USE ENTITY work.convolutionCore7(rtl);

  FOR ALL : convolutionCore8
    USE ENTITY work.convolutionCore8(rtl);

  FOR ALL : convolutionCore9
    USE ENTITY work.convolutionCore9(rtl);

  FOR ALL : convolutionCore10
    USE ENTITY work.convolutionCore10(rtl);

  FOR ALL : convolutionCore11
    USE ENTITY work.convolutionCore11(rtl);

  FOR ALL : convolutionCore12
    USE ENTITY work.convolutionCore12(rtl);

  FOR ALL : convolutionCore13
    USE ENTITY work.convolutionCore13(rtl);

  FOR ALL : convolutionCore14
    USE ENTITY work.convolutionCore14(rtl);

  FOR ALL : convolutionCore15
    USE ENTITY work.convolutionCore15(rtl);

  FOR ALL : convolutionCore16
    USE ENTITY work.convolutionCore16(rtl);

  FOR ALL : convolutionCore17
    USE ENTITY work.convolutionCore17(rtl);

  FOR ALL : convolutionCore18
    USE ENTITY work.convolutionCore18(rtl);

  FOR ALL : convolutionCore19
    USE ENTITY work.convolutionCore19(rtl);

  FOR ALL : convolutionCore20
    USE ENTITY work.convolutionCore20(rtl);

  FOR ALL : convolutionCore21
    USE ENTITY work.convolutionCore21(rtl);

  FOR ALL : convolutionCore22
    USE ENTITY work.convolutionCore22(rtl);

  FOR ALL : convolutionCore23
    USE ENTITY work.convolutionCore23(rtl);

  FOR ALL : convolutionCore24
    USE ENTITY work.convolutionCore24(rtl);

  -- Signals
  SIGNAL input_1                          : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Rate_Transition3_bypass_reg      : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL input_2                          : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Rate_Transition_out1             : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Rate_Transition_out1_1           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant1_out1                   : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL record_rsvd_1                    : std_logic;
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL Upsample2_bypass_reg             : std_logic;  -- ufix1
  SIGNAL NOT1_out1_1                      : std_logic;
  SIGNAL Upsample_zero                    : std_logic;
  SIGNAL Upsample_muxout                  : std_logic;
  SIGNAL Upsample_bypass_reg              : std_logic;  -- ufix1
  SIGNAL Upsample_bypassout               : std_logic;
  SIGNAL Rate_Transition21_bypass_reg     : std_logic;  -- ufix1
  SIGNAL record_rsvd_2                    : std_logic;
  SIGNAL Rate_Transition2_out1            : std_logic;
  SIGNAL Constant_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch1_out1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL ImpulseCounter_ctrl_const_out    : std_logic;
  SIGNAL ImpulseCounter_ctrl_const_out_1  : std_logic;
  SIGNAL ImpulseCounter_ctrl_delay_out    : std_logic;
  SIGNAL ImpulseCounter_Initial_Val_out   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Detect_Rise_Positive_out1_1      : std_logic;
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_from                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ImpulseCounter_out1              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_value_1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL rd_4_reg                         : vector_of_unsigned16(0 TO 1);  -- ufix16 [2]
  SIGNAL ImpulseCounter_out1_1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL range_hit                        : std_logic;
  SIGNAL ImpulseCounter_out2              : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL rd_5_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL OR_out1_1                        : std_logic;
  SIGNAL count_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ImpulseCounter_bypass_reg        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL ImpulseCounter_out               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ImpulseCounter_out_1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Rate_Transition11_bypass_reg     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL ImpulseCounter_out1_2            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Rate_Transition1_out1            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Upsample11_bypass_reg            : std_logic;  -- ufix1
  SIGNAL OR_out1_2                        : std_logic;
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL Upsample1_muxout                 : std_logic;
  SIGNAL Upsample1_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample1_bypassout              : std_logic;
  SIGNAL Upsample1_out1                   : std_logic;
  SIGNAL Divide_by_Constant_HDL_Optimized_out1 : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Divide_by_Constant_HDL_Optimized_out2 : std_logic;
  SIGNAL decoded                          : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL decoded_0                        : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL convolutionCore1_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore1_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore1_out3            : std_logic;
  SIGNAL decoded_1                        : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL convolutionCore2_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore2_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore2_out3            : std_logic;
  SIGNAL decoded_2                        : std_logic;
  SIGNAL AND3_out1                        : std_logic;
  SIGNAL convolutionCore3_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore3_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore3_out3            : std_logic;
  SIGNAL decoded_3                        : std_logic;
  SIGNAL AND4_out1                        : std_logic;
  SIGNAL convolutionCore4_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore4_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore4_out3            : std_logic;
  SIGNAL decoded_4                        : std_logic;
  SIGNAL AND5_out1                        : std_logic;
  SIGNAL convolutionCore5_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore5_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore5_out3            : std_logic;
  SIGNAL decoded_5                        : std_logic;
  SIGNAL AND6_out1                        : std_logic;
  SIGNAL convolutionCore6_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore6_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore6_out3            : std_logic;
  SIGNAL decoded_6                        : std_logic;
  SIGNAL AND7_out1                        : std_logic;
  SIGNAL convolutionCore7_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore7_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore7_out3            : std_logic;
  SIGNAL decoded_7                        : std_logic;
  SIGNAL AND8_out1                        : std_logic;
  SIGNAL convolutionCore8_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore8_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore8_out3            : std_logic;
  SIGNAL decoded_8                        : std_logic;
  SIGNAL AND9_out1                        : std_logic;
  SIGNAL convolutionCore9_out1            : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore9_out2            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore9_out3            : std_logic;
  SIGNAL decoded_9                        : std_logic;
  SIGNAL AND10_out1                       : std_logic;
  SIGNAL convolutionCore10_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore10_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore10_out3           : std_logic;
  SIGNAL decoded_10                       : std_logic;
  SIGNAL AND11_out1                       : std_logic;
  SIGNAL convolutionCore11_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore11_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore11_out3           : std_logic;
  SIGNAL decoded_11                       : std_logic;
  SIGNAL AND12_out1                       : std_logic;
  SIGNAL convolutionCore12_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore12_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore12_out3           : std_logic;
  SIGNAL decoded_12                       : std_logic;
  SIGNAL AND16_out1                       : std_logic;
  SIGNAL convolutionCore13_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore13_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore13_out3           : std_logic;
  SIGNAL decoded_13                       : std_logic;
  SIGNAL AND17_out1                       : std_logic;
  SIGNAL convolutionCore14_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore14_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore14_out3           : std_logic;
  SIGNAL decoded_14                       : std_logic;
  SIGNAL AND18_out1                       : std_logic;
  SIGNAL convolutionCore15_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore15_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore15_out3           : std_logic;
  SIGNAL decoded_15                       : std_logic;
  SIGNAL AND19_out1                       : std_logic;
  SIGNAL convolutionCore16_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore16_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore16_out3           : std_logic;
  SIGNAL decoded_16                       : std_logic;
  SIGNAL AND20_out1                       : std_logic;
  SIGNAL convolutionCore17_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore17_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore17_out3           : std_logic;
  SIGNAL decoded_17                       : std_logic;
  SIGNAL AND13_out1                       : std_logic;
  SIGNAL convolutionCore18_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore18_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore18_out3           : std_logic;
  SIGNAL decoded_18                       : std_logic;
  SIGNAL AND14_out1                       : std_logic;
  SIGNAL convolutionCore19_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore19_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore19_out3           : std_logic;
  SIGNAL decoded_19                       : std_logic;
  SIGNAL AND15_out1                       : std_logic;
  SIGNAL convolutionCore20_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore20_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore20_out3           : std_logic;
  SIGNAL decoded_20                       : std_logic;
  SIGNAL AND24_out1                       : std_logic;
  SIGNAL convolutionCore21_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore21_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore21_out3           : std_logic;
  SIGNAL decoded_21                       : std_logic;
  SIGNAL AND21_out1                       : std_logic;
  SIGNAL convolutionCore22_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore22_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore22_out3           : std_logic;
  SIGNAL decoded_22                       : std_logic;
  SIGNAL AND22_out1                       : std_logic;
  SIGNAL convolutionCore23_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore23_out2           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL convolutionCore23_out3           : std_logic;
  SIGNAL decoded_23                       : std_logic;
  SIGNAL AND23_out1                       : std_logic;
  SIGNAL convolutionCore24_out1           : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL convolutionCore24_out3           : std_logic;
  SIGNAL rd_8_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL convolutionCore24_out3_1         : std_logic;
  SIGNAL convolutionCore24_out1_signed    : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL Saturation3_out1                 : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL Saturation3_out1_1               : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL Saturation3_out1_dtc             : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch_out1                      : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch_out1_1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Rate_Transition6_out1            : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Rate_Transition6_out1_1          : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL t_bypass_reg                     : std_logic;  -- ufix1
  SIGNAL OR_out1_3                        : std_logic;

BEGIN
  -- 
  -- Recording Convolution Engine
  -- This subsystem implements convolution between a sample (recorded from the input signal while record is high) and 
  -- streaming input data

  u_Detect_Rise_Positive : Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              U => record_rsvd,
              Y => Detect_Rise_Positive_out1
              );

  u_rounded_div_by_const : div_by_constant
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              X => Rate_Transition1_out1,  -- uint16
              validIn => Upsample1_out1,
              Y => Divide_by_Constant_HDL_Optimized_out1,  -- ufix6
              validOut => Divide_by_Constant_HDL_Optimized_out2
              );

  u_coreIndexDecoder : coreIndexDecoder
    PORT MAP( number => Divide_by_Constant_HDL_Optimized_out1,  -- ufix6
              decoded => decoded  -- boolean [24]
              );

  u_convolutionCore1 : convolutionCore1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => Rate_Transition_out1_1,  -- sfix24_En23
              preload => std_logic_vector(Constant1_out1),  -- sfix40_En23
              new_sample => Upsample_bypassout,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND1_out1,
              result => convolutionCore1_out1,  -- sfix40_En23
              old_sample => convolutionCore1_out2,  -- sfix24_En23
              valid => convolutionCore1_out3
              );

  u_convolutionCore2 : convolutionCore2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore1_out2,  -- sfix24_En23
              preload => convolutionCore1_out1,  -- sfix40_En23
              new_sample => convolutionCore1_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND2_out1,
              result => convolutionCore2_out1,  -- sfix40_En23
              old_sample => convolutionCore2_out2,  -- sfix24_En23
              valid => convolutionCore2_out3
              );

  u_convolutionCore3 : convolutionCore3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore2_out2,  -- sfix24_En23
              preload => convolutionCore2_out1,  -- sfix40_En23
              new_sample => convolutionCore2_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND3_out1,
              result => convolutionCore3_out1,  -- sfix40_En23
              old_sample => convolutionCore3_out2,  -- sfix24_En23
              valid => convolutionCore3_out3
              );

  u_convolutionCore4 : convolutionCore4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore3_out2,  -- sfix24_En23
              preload => convolutionCore3_out1,  -- sfix40_En23
              new_sample => convolutionCore3_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND4_out1,
              result => convolutionCore4_out1,  -- sfix40_En23
              old_sample => convolutionCore4_out2,  -- sfix24_En23
              valid => convolutionCore4_out3
              );

  u_convolutionCore5 : convolutionCore5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore4_out2,  -- sfix24_En23
              preload => convolutionCore4_out1,  -- sfix40_En23
              new_sample => convolutionCore4_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND5_out1,
              result => convolutionCore5_out1,  -- sfix40_En23
              old_sample => convolutionCore5_out2,  -- sfix24_En23
              valid => convolutionCore5_out3
              );

  u_convolutionCore6 : convolutionCore6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore5_out2,  -- sfix24_En23
              preload => convolutionCore5_out1,  -- sfix40_En23
              new_sample => convolutionCore5_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND6_out1,
              result => convolutionCore6_out1,  -- sfix40_En23
              old_sample => convolutionCore6_out2,  -- sfix24_En23
              valid => convolutionCore6_out3
              );

  u_convolutionCore7 : convolutionCore7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore6_out2,  -- sfix24_En23
              preload => convolutionCore6_out1,  -- sfix40_En23
              new_sample => convolutionCore6_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND7_out1,
              result => convolutionCore7_out1,  -- sfix40_En23
              old_sample => convolutionCore7_out2,  -- sfix24_En23
              valid => convolutionCore7_out3
              );

  u_convolutionCore8 : convolutionCore8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore7_out2,  -- sfix24_En23
              preload => convolutionCore7_out1,  -- sfix40_En23
              new_sample => convolutionCore7_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND8_out1,
              result => convolutionCore8_out1,  -- sfix40_En23
              old_sample => convolutionCore8_out2,  -- sfix24_En23
              valid => convolutionCore8_out3
              );

  u_convolutionCore9 : convolutionCore9
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore8_out2,  -- sfix24_En23
              preload => convolutionCore8_out1,  -- sfix40_En23
              new_sample => convolutionCore8_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND9_out1,
              result => convolutionCore9_out1,  -- sfix40_En23
              old_sample => convolutionCore9_out2,  -- sfix24_En23
              valid => convolutionCore9_out3
              );

  u_convolutionCore10 : convolutionCore10
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore9_out2,  -- sfix24_En23
              preload => convolutionCore9_out1,  -- sfix40_En23
              new_sample => convolutionCore9_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND10_out1,
              result => convolutionCore10_out1,  -- sfix40_En23
              old_sample => convolutionCore10_out2,  -- sfix24_En23
              valid => convolutionCore10_out3
              );

  u_convolutionCore11 : convolutionCore11
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore10_out2,  -- sfix24_En23
              preload => convolutionCore10_out1,  -- sfix40_En23
              new_sample => convolutionCore10_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND11_out1,
              result => convolutionCore11_out1,  -- sfix40_En23
              old_sample => convolutionCore11_out2,  -- sfix24_En23
              valid => convolutionCore11_out3
              );

  u_convolutionCore12 : convolutionCore12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore11_out2,  -- sfix24_En23
              preload => convolutionCore11_out1,  -- sfix40_En23
              new_sample => convolutionCore11_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND12_out1,
              result => convolutionCore12_out1,  -- sfix40_En23
              old_sample => convolutionCore12_out2,  -- sfix24_En23
              valid => convolutionCore12_out3
              );

  u_convolutionCore13 : convolutionCore13
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore12_out2,  -- sfix24_En23
              preload => convolutionCore12_out1,  -- sfix40_En23
              new_sample => convolutionCore12_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND16_out1,
              result => convolutionCore13_out1,  -- sfix40_En23
              old_sample => convolutionCore13_out2,  -- sfix24_En23
              valid => convolutionCore13_out3
              );

  u_convolutionCore14 : convolutionCore14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore13_out2,  -- sfix24_En23
              preload => convolutionCore13_out1,  -- sfix40_En23
              new_sample => convolutionCore13_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND17_out1,
              result => convolutionCore14_out1,  -- sfix40_En23
              old_sample => convolutionCore14_out2,  -- sfix24_En23
              valid => convolutionCore14_out3
              );

  u_convolutionCore15 : convolutionCore15
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore14_out2,  -- sfix24_En23
              preload => convolutionCore14_out1,  -- sfix40_En23
              new_sample => convolutionCore14_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND18_out1,
              result => convolutionCore15_out1,  -- sfix40_En23
              old_sample => convolutionCore15_out2,  -- sfix24_En23
              valid => convolutionCore15_out3
              );

  u_convolutionCore16 : convolutionCore16
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore15_out2,  -- sfix24_En23
              preload => convolutionCore15_out1,  -- sfix40_En23
              new_sample => convolutionCore15_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND19_out1,
              result => convolutionCore16_out1,  -- sfix40_En23
              old_sample => convolutionCore16_out2,  -- sfix24_En23
              valid => convolutionCore16_out3
              );

  u_convolutionCore17 : convolutionCore17
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore16_out2,  -- sfix24_En23
              preload => convolutionCore16_out1,  -- sfix40_En23
              new_sample => convolutionCore16_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND20_out1,
              result => convolutionCore17_out1,  -- sfix40_En23
              old_sample => convolutionCore17_out2,  -- sfix24_En23
              valid => convolutionCore17_out3
              );

  u_convolutionCore18 : convolutionCore18
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore17_out2,  -- sfix24_En23
              preload => convolutionCore17_out1,  -- sfix40_En23
              new_sample => convolutionCore17_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND13_out1,
              result => convolutionCore18_out1,  -- sfix40_En23
              old_sample => convolutionCore18_out2,  -- sfix24_En23
              valid => convolutionCore18_out3
              );

  u_convolutionCore19 : convolutionCore19
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore18_out2,  -- sfix24_En23
              preload => convolutionCore18_out1,  -- sfix40_En23
              new_sample => convolutionCore18_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND14_out1,
              result => convolutionCore19_out1,  -- sfix40_En23
              old_sample => convolutionCore19_out2,  -- sfix24_En23
              valid => convolutionCore19_out3
              );

  u_convolutionCore20 : convolutionCore20
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore19_out2,  -- sfix24_En23
              preload => convolutionCore19_out1,  -- sfix40_En23
              new_sample => convolutionCore19_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND15_out1,
              result => convolutionCore20_out1,  -- sfix40_En23
              old_sample => convolutionCore20_out2,  -- sfix24_En23
              valid => convolutionCore20_out3
              );

  u_convolutionCore21 : convolutionCore21
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore20_out2,  -- sfix24_En23
              preload => convolutionCore20_out1,  -- sfix40_En23
              new_sample => convolutionCore20_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND24_out1,
              result => convolutionCore21_out1,  -- sfix40_En23
              old_sample => convolutionCore21_out2,  -- sfix24_En23
              valid => convolutionCore21_out3
              );

  u_convolutionCore22 : convolutionCore22
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore21_out2,  -- sfix24_En23
              preload => convolutionCore21_out1,  -- sfix40_En23
              new_sample => convolutionCore21_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND21_out1,
              result => convolutionCore22_out1,  -- sfix40_En23
              old_sample => convolutionCore22_out2,  -- sfix24_En23
              valid => convolutionCore22_out3
              );

  u_convolutionCore23 : convolutionCore23
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore22_out2,  -- sfix24_En23
              preload => convolutionCore22_out1,  -- sfix40_En23
              new_sample => convolutionCore22_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND22_out1,
              result => convolutionCore23_out1,  -- sfix40_En23
              old_sample => convolutionCore23_out2,  -- sfix24_En23
              valid => convolutionCore23_out3
              );

  u_convolutionCore24 : convolutionCore24
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => convolutionCore23_out2,  -- sfix24_En23
              preload => convolutionCore23_out1,  -- sfix40_En23
              new_sample => convolutionCore23_out3,
              impulse => std_logic_vector(Switch1_out1),  -- sfix24_En23
              new_impulse => AND23_out1,
              result => convolutionCore24_out1,  -- sfix40_En23
              valid => convolutionCore24_out3
              );

  input_1 <= signed(input);

  Rate_Transition3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_bypass_reg <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Rate_Transition3_bypass_reg <= input_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_bypass_process;

  
  input_2 <= input_1 WHEN enb_1_2048_1 = '1' ELSE
      Rate_Transition3_bypass_reg;

  Rate_Transition_out1 <= input_2;

  Rate_Transition_out1_1 <= std_logic_vector(Rate_Transition_out1);

  Constant1_out1 <= to_signed(0, 40);

  record_rsvd_1 <= record_rsvd;

  NOT1_out1 <=  NOT record_rsvd_1;

  Upsample2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample2_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Upsample2_bypass_reg <= NOT1_out1;
      END IF;
    END IF;
  END PROCESS Upsample2_bypass_process;

  
  NOT1_out1_1 <= NOT1_out1 WHEN enb_1_2048_1 = '1' ELSE
      Upsample2_bypass_reg;

  Upsample_zero <= '0';

  -- Upsample: Upsample by 2048, Sample offset 0 
  
  Upsample_muxout <= NOT1_out1_1 WHEN enb_1_2048_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg;

  Rate_Transition21_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition21_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Rate_Transition21_bypass_reg <= record_rsvd_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition21_bypass_process;

  
  record_rsvd_2 <= record_rsvd_1 WHEN enb_1_2048_1 = '1' ELSE
      Rate_Transition21_bypass_reg;

  Rate_Transition2_out1 <= record_rsvd_2;

  Constant_out1 <= to_signed(16#000000#, 24);

  
  Switch1_out1 <= Constant_out1 WHEN Rate_Transition2_out1 = '0' ELSE
      Rate_Transition_out1;

  ImpulseCounter_ctrl_const_out <= '1';

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ImpulseCounter_ctrl_const_out_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        ImpulseCounter_ctrl_const_out_1 <= ImpulseCounter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  ImpulseCounter_ctrl_delay_out <= ImpulseCounter_ctrl_const_out_1;

  ImpulseCounter_Initial_Val_out <= to_unsigned(16#BB7F#, 16);

  Detect_Rise_Positive_out1_1 <= Detect_Rise_Positive_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 47999
  count_step <= to_unsigned(16#0001#, 16);

  count_from <= to_unsigned(16#0000#, 16);

  count <= ImpulseCounter_out1 + count_step;

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_1 <= count;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      need_to_wrap_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        need_to_wrap_1 <= need_to_wrap;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  count_value <= count_1 WHEN need_to_wrap_1 = '0' ELSE
      count_from;

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_value_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_value_1 <= count_value;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= ImpulseCounter_out1;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  ImpulseCounter_out1_1 <= rd_4_reg(1);

  
  range_hit <= '1' WHEN ImpulseCounter_out1 > to_unsigned(16#FFFE#, 16) ELSE
      '0';

  
  need_to_wrap <= '1' WHEN ImpulseCounter_out1 = to_unsigned(16#BB7F#, 16) ELSE
      '0';

  ImpulseCounter_out2 <= need_to_wrap OR range_hit;

  NOT_out1 <=  NOT ImpulseCounter_out2;

  OR_out1 <= Detect_Rise_Positive_out1_1 OR NOT_out1;

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_5_reg(0) <= OR_out1;
        rd_5_reg(1) <= rd_5_reg(0);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  OR_out1_1 <= rd_5_reg(1);

  
  count_2 <= ImpulseCounter_out1_1 WHEN OR_out1_1 = '0' ELSE
      count_value_1;

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_3 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_3 <= count_2;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  ImpulseCounter_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ImpulseCounter_bypass_reg <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        ImpulseCounter_bypass_reg <= count_3;
      END IF;
    END IF;
  END PROCESS ImpulseCounter_bypass_process;

  
  ImpulseCounter_out <= count_3 WHEN enb_1_2048_1 = '1' ELSE
      ImpulseCounter_bypass_reg;

  ImpulseCounter_out_1 <= ImpulseCounter_out;

  
  ImpulseCounter_out1 <= ImpulseCounter_Initial_Val_out WHEN ImpulseCounter_ctrl_delay_out = '0' ELSE
      ImpulseCounter_out_1;

  Rate_Transition11_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition11_bypass_reg <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Rate_Transition11_bypass_reg <= ImpulseCounter_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition11_bypass_process;

  
  ImpulseCounter_out1_2 <= ImpulseCounter_out1 WHEN enb_1_2048_1 = '1' ELSE
      Rate_Transition11_bypass_reg;

  Rate_Transition1_out1 <= std_logic_vector(ImpulseCounter_out1_2);

  Upsample11_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample11_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Upsample11_bypass_reg <= OR_out1;
      END IF;
    END IF;
  END PROCESS Upsample11_bypass_process;

  
  OR_out1_2 <= OR_out1 WHEN enb_1_2048_1 = '1' ELSE
      Upsample11_bypass_reg;

  Upsample1_zero <= '0';

  -- Upsample1: Upsample by 2048, Sample offset 1 
  
  Upsample1_muxout <= OR_out1_2 WHEN enb_1_2048_1 = '1' ELSE
      Upsample1_zero;

  -- Upsample bypass register
  Upsample1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample1_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample1_bypass_reg <= Upsample1_muxout;
      END IF;
    END IF;
  END PROCESS Upsample1_bypass_process;

  
  Upsample1_bypassout <= Upsample1_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample1_bypass_reg;

  -- Upsample sample offset register
  Upsample1_int_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND enb = '1' THEN
        Upsample1_out1 <= Upsample1_bypassout;
      END IF;
    END IF;
  END PROCESS Upsample1_int_delay_process;


  decoded_0 <= decoded(0);

  AND1_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_0;

  decoded_1 <= decoded(1);

  AND2_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_1;

  decoded_2 <= decoded(2);

  AND3_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_2;

  decoded_3 <= decoded(3);

  AND4_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_3;

  decoded_4 <= decoded(4);

  AND5_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_4;

  decoded_5 <= decoded(5);

  AND6_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_5;

  decoded_6 <= decoded(6);

  AND7_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_6;

  decoded_7 <= decoded(7);

  AND8_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_7;

  decoded_8 <= decoded(8);

  AND9_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_8;

  decoded_9 <= decoded(9);

  AND10_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_9;

  decoded_10 <= decoded(10);

  AND11_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_10;

  decoded_11 <= decoded(11);

  AND12_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_11;

  decoded_12 <= decoded(12);

  AND16_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_12;

  decoded_13 <= decoded(13);

  AND17_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_13;

  decoded_14 <= decoded(14);

  AND18_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_14;

  decoded_15 <= decoded(15);

  AND19_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_15;

  decoded_16 <= decoded(16);

  AND20_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_16;

  decoded_17 <= decoded(17);

  AND13_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_17;

  decoded_18 <= decoded(18);

  AND14_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_18;

  decoded_19 <= decoded(19);

  AND15_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_19;

  decoded_20 <= decoded(20);

  AND24_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_20;

  decoded_21 <= decoded(21);

  AND21_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_21;

  decoded_22 <= decoded(22);

  AND22_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_22;

  decoded_23 <= decoded(23);

  AND23_out1 <= Divide_by_Constant_HDL_Optimized_out2 AND decoded_23;

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_8_reg(0) <= convolutionCore24_out3;
        rd_8_reg(1) <= rd_8_reg(0);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  convolutionCore24_out3_1 <= rd_8_reg(1);

  convolutionCore24_out1_signed <= signed(convolutionCore24_out1);

  
  Saturation3_out1 <= to_signed(8388607, 40) WHEN convolutionCore24_out1_signed > to_signed(8388607, 40) ELSE
      to_signed(-8388608, 40) WHEN convolutionCore24_out1_signed < to_signed(-8388608, 40) ELSE
      convolutionCore24_out1_signed;

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Saturation3_out1_1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Saturation3_out1_1 <= Saturation3_out1;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  Saturation3_out1_dtc <= Saturation3_out1_1(23 DOWNTO 0);

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  
  Switch_out1 <= Switch_out1_1 WHEN convolutionCore24_out3_1 = '0' ELSE
      Saturation3_out1_dtc;

  Rate_Transition6_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition6_out1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Rate_Transition6_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition6_output_process;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition6_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition6_out1_1 <= Rate_Transition6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  convolved <= std_logic_vector(Rate_Transition6_out1_1);

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        t_bypass_reg <= OR_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  OR_out1_3 <= OR_out1 WHEN enb_1_2048_1 = '1' ELSE
      t_bypass_reg;

  recording <= OR_out1_3;

END rtl;

