-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/convolutionPlayback/wetDryMixer.vhd
-- Created: 2024-05-04 23:42:17
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: wetDryMixer
-- Source Path: convolutionPlayback/convolutionPlayback/wetDryMixer
-- Hierarchy Level: 1
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.convolutionPlayback_pkg.ALL;

ENTITY wetDryMixer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dry                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        wet                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        wetDryMix                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        volume                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        mixed                             :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END wetDryMixer;


ARCHITECTURE rtl OF wetDryMixer IS

  -- Signals
  SIGNAL dry_signed                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL HwModeRegister_reg               : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL dry_1                            : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Constant_out1_1                  : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wetDryMix_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wetDryMix_1                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Subtract_sub_cast                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Subtract_sub_cast_1              : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Subtract_out1                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Subtract_out1_1                  : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product_out1                     : signed(40 DOWNTO 0);  -- sfix41_En39
  SIGNAL rd_4_reg                         : vector_of_signed41(0 TO 1);  -- sfix41 [2]
  SIGNAL Product_out1_1                   : signed(40 DOWNTO 0);  -- sfix41_En39
  SIGNAL Product_out1_2                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product_out1_3                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL wetDryMix_2                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wet_signed                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL HwModeRegister3_reg              : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL wet_1                            : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product1_mul_temp                : signed(40 DOWNTO 0);  -- sfix41_En39
  SIGNAL Product1_out1                    : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product1_out1_1                  : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product1_out1_2                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL rd_6_reg                         : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Product1_out1_3                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Add_add_cast                     : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_add_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1                         : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1_1                       : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1_2                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Add_out1_3                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL volume_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL HwModeRegister5_reg              : vector_of_unsigned16(0 TO 6);  -- ufix16 [7]
  SIGNAL volume_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product2_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product2_mul_temp                : signed(40 DOWNTO 0);  -- sfix41_En39
  SIGNAL Product2_out1                    : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL rd_9_reg                         : vector_of_signed40(0 TO 1);  -- sfix40 [2]
  SIGNAL Product2_out1_1                  : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product2_out1_2                  : signed(23 DOWNTO 0);  -- sfix24_En23

  ATTRIBUTE multstyle : string;

BEGIN
  dry_signed <= signed(dry);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= dry_signed;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  dry_1 <= HwModeRegister_reg(1);

  Constant_out1 <= to_unsigned(16#FFFF#, 16);

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant_out1_1 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  wetDryMix_unsigned <= unsigned(wetDryMix);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wetDryMix_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wetDryMix_1 <= wetDryMix_unsigned;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Subtract_sub_cast <= signed(resize(Constant_out1_1, 17));
  Subtract_sub_cast_1 <= signed(resize(wetDryMix_1, 17));
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract_out1_1 <= Subtract_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_out1 <= dry_1 * Subtract_out1_1;

  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => to_signed(0, 41));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= Product_out1;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  Product_out1_1 <= rd_4_reg(1);

  
  Product_out1_2 <= X"7FFFFF" WHEN (Product_out1_1(40) = '0') AND (Product_out1_1(39) /= '0') ELSE
      X"800000" WHEN (Product_out1_1(40) = '1') AND (Product_out1_1(39) /= '1') ELSE
      Product_out1_1(39 DOWNTO 16);

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_3 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_3 <= Product_out1_2;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wetDryMix_2 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wetDryMix_2 <= wetDryMix_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  wet_signed <= signed(wet);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister3_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister3_reg(0) <= wet_signed;
        HwModeRegister3_reg(1) <= HwModeRegister3_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  wet_1 <= HwModeRegister3_reg(1);

  Product1_cast <= signed(resize(wetDryMix_2, 17));
  Product1_mul_temp <= Product1_cast * wet_1;
  Product1_out1 <= Product1_mul_temp(39 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Product1_out1_2 <= Product1_out1_1(39 DOWNTO 16);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_6_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_6_reg(0) <= Product1_out1_2;
        rd_6_reg(1) <= rd_6_reg(0);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  Product1_out1_3 <= rd_6_reg(1);

  Add_add_cast <= resize(Product_out1_3, 25);
  Add_add_cast_1 <= resize(Product1_out1_3, 25);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add_out1_1 <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  
  Add_out1_2 <= X"7FFFFF" WHEN (Add_out1_1(24) = '0') AND (Add_out1_1(23) /= '0') ELSE
      X"800000" WHEN (Add_out1_1(24) = '1') AND (Add_out1_1(23) /= '1') ELSE
      Add_out1_1(23 DOWNTO 0);

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add_out1_3 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add_out1_3 <= Add_out1_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  volume_unsigned <= unsigned(volume);

  HwModeRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister5_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister5_reg(0) <= volume_unsigned;
        HwModeRegister5_reg(1 TO 6) <= HwModeRegister5_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;

  volume_1 <= HwModeRegister5_reg(6);

  Product2_cast <= signed(resize(volume_1, 17));
  Product2_mul_temp <= Add_out1_3 * Product2_cast;
  Product2_out1 <= Product2_mul_temp(39 DOWNTO 0);

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_9_reg <= (OTHERS => to_signed(0, 40));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_9_reg(0) <= Product2_out1;
        rd_9_reg(1) <= rd_9_reg(0);
      END IF;
    END IF;
  END PROCESS rd_9_process;

  Product2_out1_1 <= rd_9_reg(1);

  Product2_out1_2 <= Product2_out1_1(39 DOWNTO 16);

  mixed <= std_logic_vector(Product2_out1_2);

END rtl;

